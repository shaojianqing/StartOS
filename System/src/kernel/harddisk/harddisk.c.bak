#include "../const/const.h"
#include "../type/type.h"
#include "../system/system.h"
#include "../system/descriptor.h"
#include "../process/process.h"
#include "../console/console.h"
#include "../filesys/cache.h"
#include "../filesys/block.h"
#include "harddisk.h"

extern Console *console;

typedef struct Command
{
    u8 features;
	
	u8 count;

	u8 lbaLow;

	u8 lbaMid;

	u8 lbaHigh;

	u8 device;

	u8 command;

} Command;

Command command;

static void doHarddiskRequest();

void initHarddiskSetting() {


	//blockDeviceList[DEVICE_HARD_DISK].requestHandler = doHarddiskRequest;
}

int sys_setup() {
	return 0;
}

void intHarddiskHandler() {
	inByte(REG_STATUS);
	outByte(0x20, 0xA0);
	outByte(0x20, 0x20);

	console->putChar(console, 'M', 15);

}

bool waitForStatus(int mask, int val) {
	while(true) {
		if ((inByte(REG_STATUS) & mask)==val)	{
			return true;	
		}
	}
	return false;
}

bool sendCommand(Command *command) {
	if (waitForStatus(STATUS_BSY, 0)==true) {
		outByte(REG_DEV_CTRL, 0);
		outByte(REG_FEATURES, command->features);
		outByte(REG_NSECTOR, command->count);
		outByte(REG_LBA_LOW, command->lbaLow);
		outByte(REG_LBA_MID, command->lbaMid);
		outByte(REG_LBA_HIGH, command->lbaHigh);
		outByte(REG_DEVICE, command->device);
		outByte(REG_COMMAND, command->command);
		return true;
	}
	return false;
}

bool isPrint = false;

void readDataBlock(CacheData *cacheData) {
	if (cacheData!=NULL) {
		u32 block = cacheData->block;
		byte *buffer = (byte *)(5*1024*1024);
		u32 sector = block*2;

		command.features = 0;
		command.count = 2;
		command.lbaLow	= sector & 0xFF;
		command.lbaMid	= (sector >>  8) & 0xFF;
		command.lbaHigh	= (sector >> 16) & 0xFF;

		command.device = MAKE_DEVICE_REG(1, 0, (sector >> 24) & 0xF);
		command.command = ATA_READ;
		
		sendCommand(&command);

		int sectorLeft = command.count;

		while (sectorLeft>0) {	
			if (waitForStatus(STATUS_BSY, 0)) {
				readPort(REG_DATA, buffer, SECTOR_SIZE);
				buffer+=SECTOR_SIZE;
				sectorLeft--;
			}
		}

		buffer = (byte *)(5*1024*1024);

		char c = buffer[0];

		if (isPrint==false) {
		
			isPrint = true;
			if (c==0) {
				console->putChar(console, '0', 15);
			} else {
				console->printByte(console, c, 15);		
			}
		}


		

		//console->print(console, "readDataBlock", 13);
	}
}

void writeDataBlock(CacheData *cacheData) {
	if (cacheData!=NULL) {
		u32 block = cacheData->block;
		byte *buffer = cacheData->data;
		u32 sector = block*2;

		command.features = 0;
		command.count = 2;
		command.lbaLow	= sector & 0xFF;
		command.lbaMid	= (sector >>  8) & 0xFF;
		command.lbaHigh	= (sector >> 16) & 0xFF;

		command.device = MAKE_DEVICE_REG(1, 0, (sector >> 24) & 0xF);
		command.command = ATA_WRITE;
		
		sendCommand(&command);
		int sectorLeft = command.count;
		while (sectorLeft>0) {	
			waitForStatus(STATUS_BSY, 0);
			readPort(REG_DATA, buffer, SECTOR_SIZE);
			buffer+=SECTOR_SIZE;
			sectorLeft--;
		}
	}
}

void doHarddiskRequest() {
	
}


